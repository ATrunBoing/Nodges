export class StateManager {
    constructor() {
        this.state = {
            selectedObject: null,
            glowIntensity: 0,
            glowDirection: 1
        };
        this.subscribers = new Set();
        this.lastTime = performance.now();
    }

    subscribe(callback) {
        this.subscribers.add(callback);
        // Initial state notification
        callback(this.state);
        return () => this.subscribers.delete(callback);
    }

    update(partialState) {
        const oldState = { ...this.state };
        this.state = { ...this.state, ...partialState };

        // Prüfe auf Änderungen ohne JSON.stringify (vermeidet zirkuläre Referenzen)
        let hasChanged = false;
        for (const key in partialState) {
            if (oldState[key] !== this.state[key]) {
                hasChanged = true;
                break;
            }
        }

        if (hasChanged) {
            this.notifySubscribers();
        }
    }

    notifySubscribers() {
        this.subscribers.forEach(callback => callback(this.state));
    }

    // Spezifische State-Updates für häufige Operationen
    setHoveredObject(object) {
        if (this.state.hoveredObject !== object) {
            this.update({ hoveredObject: object });
        }
    }

    setSelectedObject(object) {
        if (this.state.selectedObject !== object) {
            this.update({ 
                selectedObject: object,
                glowIntensity: 0,
                glowDirection: 1
            });
        }
    }

    updateTooltip(visible, content = null, position = null) {
        this.update({
            tooltipVisible: visible,
            tooltipContent: content,
            tooltipPosition: position || this.state.tooltipPosition
        });
    }

    // Glow-Animation State Update
    updateGlowState(deltaTime) {
        if (this.state.selectedObject) {
            let glowFrequency = 1;
            if (this.state.selectedObject.userData.type === 'node') {
                const node = this.state.selectedObject.parent;
                if (node && node.options && typeof node.options.glowFrequency !== 'undefined') {
                    glowFrequency = node.options.glowFrequency;
                }
            }

            let newIntensity = this.state.glowIntensity + 
                deltaTime * Math.PI * 2 * glowFrequency * this.state.glowDirection;

            if (newIntensity >= 1) {
                newIntensity = 1;
                this.update({ 
                    glowIntensity: newIntensity,
                    glowDirection: -1
                });
            } else if (newIntensity <= 0) {
                newIntensity = 0;
                this.update({ 
                    glowIntensity: newIntensity,
                    glowDirection: 1
                });
            } else {
                this.update({ glowIntensity: newIntensity });
            }
        }
    }

    // Animation Loop
    animate() {
        const currentTime = performance.now();
        const deltaTime = (currentTime - this.lastTime) / 1000; // in Sekunden
        this.lastTime = currentTime;

        this.updateGlowState(deltaTime);
        requestAnimationFrame(this.animate.bind(this));
    }

    // Hilfsmethoden für State-Abfragen
    isObjectSelected(object) {
        return this.state.selectedObject === object;
    }

    isObjectHovered(object) {
        return this.state.hoveredObject === object;
    }

    getGlowIntensity() {
        return this.state.glowIntensity;
    }

    // Cleanup
    destroy() {
        this.subscribers.clear();
    }
}