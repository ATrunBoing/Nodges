<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ü§ñ KI-System-Generator Demo - Nodges 0.88</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 30px;
            backdrop-filter: blur(10px);
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        
        .demo-section {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            padding: 25px;
            margin: 20px 0;
        }
        
        .input-group {
            margin: 15px 0;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        input, select, textarea {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            box-sizing: border-box;
        }
        
        textarea {
            height: 100px;
            resize: vertical;
        }
        
        button {
            background: #4CAF50;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 10px 5px;
            transition: background 0.3s;
        }
        
        button:hover {
            background: #45a049;
        }
        
        .secondary-btn {
            background: #2196F3;
        }
        
        .secondary-btn:hover {
            background: #1976D2;
        }
        
        .example-btn {
            background: #FF9800;
        }
        
        .example-btn:hover {
            background: #F57C00;
        }
        
        .status {
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
            font-family: monospace;
        }
        
        .prompt-output {
            background: rgba(0, 0, 0, 0.5);
            padding: 20px;
            border-radius: 5px;
            margin: 15px 0;
            font-family: monospace;
            font-size: 12px;
            max-height: 400px;
            overflow-y: auto;
            white-space: pre-wrap;
        }
        
        .examples-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .example-card {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            cursor: pointer;
            transition: transform 0.2s;
        }
        
        .example-card:hover {
            transform: translateY(-2px);
            background: rgba(255, 255, 255, 0.2);
        }
        
        .workflow-steps {
            display: flex;
            justify-content: space-between;
            margin: 30px 0;
            flex-wrap: wrap;
        }
        
        .workflow-step {
            background: rgba(255, 255, 255, 0.2);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            flex: 1;
            margin: 5px;
            min-width: 150px;
        }
        
        .step-number {
            background: #4CAF50;
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ KI-System-Generator Demo</h1>
            <h2>Nodges 0.88 - Revolution√§re Systemvisualisierung</h2>
            <p>Erstellen Sie komplexe Systemvisualisierungen mit Hilfe von KI in wenigen Minuten!</p>
        </div>

        <!-- Workflow-√úbersicht -->
        <div class="demo-section">
            <h3>[START] Workflow-√úbersicht</h3>
            <div class="workflow-steps">
                <div class="workflow-step">
                    <div class="step-number">1</div>
                    <h4>üìù Beschreiben</h4>
                    <p>System in nat√ºrlicher Sprache beschreiben</p>
                </div>
                <div class="workflow-step">
                    <div class="step-number">2</div>
                    <h4>ü§ñ Generieren</h4>
                    <p>KI-Prompt erstellen und an externe KI senden</p>
                </div>
                <div class="workflow-step">
                    <div class="step-number">3</div>
                    <h4>üì• Laden</h4>
                    <p>JSON-Antwort in Nodges importieren</p>
                </div>
                <div class="workflow-step">
                    <div class="step-number">4</div>
                    <h4>[TARGET] Visualisieren</h4>
                    <p>3D-System interaktiv erkunden</p>
                </div>
            </div>
        </div>

        <!-- KI-Generator Interface -->
        <div class="demo-section">
            <h3>[TARGET] KI-System-Generator</h3>
            
            <div class="input-group">
                <label for="systemDescription">üìù System-Beschreibung:</label>
                <textarea id="systemDescription" placeholder="Beschreiben Sie das System, das Sie visualisieren m√∂chten...">Baueingabe-Verfahren Kanton Z√ºrich f√ºr Neubauten in Wohnzonen</textarea>
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px;">
                <div class="input-group">
                    <label for="systemType">[TARGET] System-Typ:</label>
                    <select id="systemType">
                        <option value="government">[GOV] Beh√∂rden/Verwaltung</option>
                        <option value="business">üè¢ Gesch√§ftsprozess</option>
                        <option value="healthcare">üè• Gesundheitswesen</option>
                        <option value="education">üéì Bildung/Forschung</option>
                    </select>
                </div>
                
                <div class="input-group">
                    <label for="jurisdiction">üåç Zust√§ndigkeitsbereich:</label>
                    <input type="text" id="jurisdiction" value="Schweiz" placeholder="z.B. Schweiz, Deutschland, EU">
                </div>
                
                <div class="input-group">
                    <label for="complexity">[DATA] Komplexit√§t:</label>
                    <select id="complexity">
                        <option value="low">üü¢ Einfach (5-10 Schritte)</option>
                        <option value="medium" selected>üü° Mittel (10-20 Schritte)</option>
                        <option value="high">üî¥ Komplex (20+ Schritte)</option>
                    </select>
                </div>
            </div>
            
            <div style="text-align: center; margin: 20px 0;">
                <button onclick="generatePrompt()">üìã KI-Prompt generieren</button>
                <button class="secondary-btn" onclick="showExamples()">[INFO] Beispiele anzeigen</button>
                <button class="example-btn" onclick="loadExample('us_political')">üá∫üá∏ US-Politik laden</button>
                <button class="example-btn" onclick="loadExample('baueingabe')">[GOV] Baueingabe laden</button>
            </div>
            
            <div class="status" id="status">
                [DATA] Status: Bereit f√ºr Eingabe
            </div>
        </div>

        <!-- Beispiele -->
        <div class="demo-section">
            <h3>[INFO] Beispiel-Systeme</h3>
            <div class="examples-grid">
                <div class="example-card" onclick="loadExampleDescription('government', 'Einb√ºrgerungsverfahren Schweiz f√ºr ordentliche Einb√ºrgerung mit allen drei Staatsebenen')">
                    <h4>[GOV] Einb√ºrgerungsverfahren</h4>
                    <p>Schweizer Einb√ºrgerungsprozess mit Bund, Kanton und Gemeinde</p>
                </div>
                <div class="example-card" onclick="loadExampleDescription('business', 'Software-Entwicklungsprozess mit Scrum-Methodik f√ºr Tech-Startup')">
                    <h4>üè¢ Scrum-Entwicklung</h4>
                    <p>Agiler Entwicklungsprozess mit 2-Wochen-Sprints</p>
                </div>
                <div class="example-card" onclick="loadExampleDescription('healthcare', 'Notfall-Patientenaufnahme im Universit√§tsklinikum mit Triage-System')">
                    <h4>üè• Notfallaufnahme</h4>
                    <p>Krankenhaus-Prozess mit Dringlichkeitsstufen</p>
                </div>
                <div class="example-card" onclick="loadExampleDescription('education', 'Universit√§ts-Bewerbungsverfahren f√ºr Master-Studium')">
                    <h4>üéì Uni-Bewerbung</h4>
                    <p>Bewerbungsprozess f√ºr Hochschulzulassung</p>
                </div>
            </div>
        </div>

        <!-- Prompt-Ausgabe -->
        <div class="demo-section" id="promptSection" style="display: none;">
            <h3>üìã Generierter KI-Prompt</h3>
            <p>Kopieren Sie diesen Prompt und f√ºgen Sie ihn in ChatGPT, Claude oder eine andere KI ein:</p>
            <div class="prompt-output" id="promptOutput"></div>
            <div style="text-align: center;">
                <button onclick="copyPrompt()">üìã Prompt kopieren</button>
                <button class="secondary-btn" onclick="simulateKIResponse()">ü§ñ KI-Antwort simulieren</button>
            </div>
        </div>

        <!-- JSON-Eingabe -->
        <div class="demo-section" id="jsonSection" style="display: none;">
            <h3>üì• KI-Antwort verarbeiten</h3>
            <p>F√ºgen Sie hier das von der KI generierte JSON ein:</p>
            <textarea id="jsonInput" placeholder="Hier das JSON von der KI einf√ºgen..." style="height: 200px; font-family: monospace;"></textarea>
            <div style="text-align: center; margin: 15px 0;">
                <button onclick="processJSON()">[START] JSON verarbeiten & visualisieren</button>
                <button class="secondary-btn" onclick="validateJSON()">[OK] JSON validieren</button>
            </div>
        </div>

        <!-- Ergebnis -->
        <div class="demo-section" id="resultSection" style="display: none;">
            <h3>[SUCCESS] Visualisierung erfolgreich!</h3>
            <div class="status" id="resultStatus"></div>
            <p>Das System wurde erfolgreich generiert und kann jetzt in Nodges visualisiert werden.</p>
            <div style="text-align: center;">
                <button onclick="openInNodeges()">[START] In Nodges √∂ffnen</button>
                <button class="secondary-btn" onclick="downloadJSON()">üíæ JSON herunterladen</button>
                <button class="example-btn" onclick="startOver()">üîÑ Neues System erstellen</button>
            </div>
        </div>
    </div>

    <script>
        let currentPrompt = '';
        let currentJSON = null;

        function generatePrompt() {
            const description = document.getElementById('systemDescription').value.trim();
            const systemType = document.getElementById('systemType').value;
            const jurisdiction = document.getElementById('jurisdiction').value;
            const complexity = document.getElementById('complexity').value;

            if (!description) {
                alert('Bitte geben Sie eine System-Beschreibung ein!');
                return;
            }

            const systemTypeDescriptions = {
                government: 'Beh√∂rden-/Verwaltungsverfahren',
                business: 'Gesch√§ftsprozess',
                healthcare: 'Gesundheitswesen-Prozess',
                education: 'Bildungs-/Lernprozess'
            };

            const complexityDescriptions = {
                low: 'Einfach (5-10 Schritte)',
                medium: 'Mittel (10-20 Schritte)',
                high: 'Komplex (20+ Schritte)'
            };

            currentPrompt = `Du bist ein Experte f√ºr die Visualisierung komplexer Systeme und Prozesse. 
Deine Aufgabe ist es, reale Systeme in Nodges-kompatible JSON-Strukturen zu √ºbersetzen.

WICHTIG: Du MUSST dich strikt an die Regeln halten.

SYSTEM-ANFRAGE:
System: ${description}
Typ: ${systemTypeDescriptions[systemType]}
Kontext: ${jurisdiction}
Komplexit√§t: ${complexityDescriptions[complexity]}

AUSGABE-FORMAT:
Erstelle ein vollst√§ndiges JSON mit folgender Struktur:

{
  "metadata": {
    "title": "Titel des Systems",
    "description": "Beschreibung des visualisierten Systems", 
    "type": "process",
    "jurisdiction": "${jurisdiction}",
    "complexity": "${complexity}"
  },
  "nodes": [
    {
      "id": "eindeutige_id",
      "name": "Anzeigename",
      "position": {"x": 0, "y": 5, "z": 0},
      "metadata": {
        "nodeType": "authority|document|decision|process",
        "type": "cube|cylinder|octahedron|sphere",
        "color": "0x0066cc|0xffcc00|0xff3300|0x00cc66",
        "duration": 0,
        "jurisdiction": "Zust√§ndigkeitsbereich",
        "requirements": []
      }
    }
  ],
  "edges": [
    {
      "source": "start_id",
      "target": "end_id", 
      "type": "sequence|dependency|approval|rejection|alternative",
      "offset": 0,
      "condition": "Bedingung f√ºr diese Verbindung",
      "probability": 1.0,
      "duration": 0
    }
  ]
}

KOORDINATEN-SYSTEM f√ºr Typ "process":
- X-Achse: Zeitlicher Ablauf (fr√ºher = niedrigere X-Werte, Abstand 5 Einheiten)
- Y-Achse: Hierarchie/Zust√§ndigkeit (h√∂her = h√∂here Y-Werte, alle > -0.81)  
- Z-Achse: Parallele/Alternative Pfade (Hauptpfad z=0, Alternativen z=¬±3)

NODE-TYPEN:
- authority (Beh√∂rden): "cube", Farbe 0x0066cc (blau)
- document (Dokumente): "cylinder", Farbe 0xffcc00 (gelb)
- decision (Entscheidungen): "octahedron", Farbe 0xff3300 (rot)
- process (Prozessschritte): "sphere", Farbe 0x00cc66 (gr√ºn)

EDGE-TYPEN:
- sequence: Zeitliche Abfolge (blau)
- dependency: Abh√§ngigkeiten (orange) 
- approval: Genehmigungsschritte (gr√ºn)
- rejection: Ablehnungspfade (rot)
- alternative: Alternative Pfade (grau)

REGELN:
- Knotenabstand: 5 Einheiten zwischen Knoten
- Y-Koordinaten: Alle > -0.81
- Symmetrische Anordnung um 0,0,0
- Offset f√ºr mehrere Edges zwischen gleichen Knoten
- Realistische Zeitdauern und Wahrscheinlichkeiten

Ber√ºcksichtige dabei:
- Alle beteiligten Akteure (Beh√∂rden, Personen, Systeme)
- Zeitliche Abl√§ufe und Reihenfolgen
- Bedingte Verzweigungen und alternative Pfade
- Erforderliche Dokumente und Abh√§ngigkeiten
- Zust√§ndigkeiten und Hierarchien
- Typische Bearbeitungszeiten

Ausgabe: Nur das vollst√§ndige JSON, keine zus√§tzlichen Erkl√§rungen.`;

            document.getElementById('promptOutput').textContent = currentPrompt;
            document.getElementById('promptSection').style.display = 'block';
            document.getElementById('status').textContent = '[DATA] Status: Prompt generiert - Bereit f√ºr KI';

            // Scroll to prompt
            document.getElementById('promptSection').scrollIntoView({ behavior: 'smooth' });
        }

        function copyPrompt() {
            navigator.clipboard.writeText(currentPrompt).then(() => {
                alert('[OK] Prompt in Zwischenablage kopiert!\n\nJetzt in ChatGPT, Claude oder eine andere KI einf√ºgen.');
                document.getElementById('jsonSection').style.display = 'block';
                document.getElementById('status').textContent = '[DATA] Status: Prompt kopiert - Warte auf KI-Antwort';
            }).catch(err => {
                alert('[ERROR] Fehler beim Kopieren. Bitte manuell kopieren.');
            });
        }

        function simulateKIResponse() {
            // Simuliere eine KI-Antwort f√ºr Demo-Zwecke
            const mockJSON = {
                "metadata": {
                    "title": "Baueingabe-Verfahren Kanton Z√ºrich",
                    "description": "Visualisierung des Bewilligungsverfahrens f√ºr Neubauten in Wohnzonen",
                    "type": "process",
                    "jurisdiction": "Schweiz",
                    "complexity": "medium"
                },
                "nodes": [
                    {
                        "id": "antragsteller",
                        "name": "Antragsteller",
                        "position": {"x": 0, "y": 2, "z": 0},
                        "metadata": {
                            "nodeType": "process",
                            "type": "sphere",
                            "color": "0x00cc66",
                            "duration": 0,
                            "jurisdiction": "Privat",
                            "requirements": []
                        }
                    },
                    {
                        "id": "baugesuch_einreichen",
                        "name": "Baugesuch einreichen",
                        "position": {"x": 5, "y": 2, "z": 0},
                        "metadata": {
                            "nodeType": "process",
                            "type": "sphere",
                            "color": "0x00cc66",
                            "duration": 1,
                            "jurisdiction": "Privat",
                            "requirements": ["Baupl√§ne", "Grundbuchauszug"]
                        }
                    },
                    {
                        "id": "gemeinde_pruefung",
                        "name": "Gemeinde Pr√ºfung",
                        "position": {"x": 10, "y": 5, "z": 0},
                        "metadata": {
                            "nodeType": "authority",
                            "type": "cube",
                            "color": "0x0066cc",
                            "duration": 14,
                            "jurisdiction": "Gemeinde",
                            "requirements": []
                        }
                    }
                ],
                "edges": [
                    {
                        "source": "antragsteller",
                        "target": "baugesuch_einreichen",
                        "type": "sequence",
                        "offset": 0,
                        "condition": "",
                        "probability": 1.0,
                        "duration": 0
                    },
                    {
                        "source": "baugesuch_einreichen",
                        "target": "gemeinde_pruefung",
                        "type": "sequence",
                        "offset": 0,
                        "condition": "",
                        "probability": 1.0,
                        "duration": 1
                    }
                ]
            };

            document.getElementById('jsonInput').value = JSON.stringify(mockJSON, null, 2);
            document.getElementById('jsonSection').style.display = 'block';
            document.getElementById('status').textContent = '[DATA] Status: Simulierte KI-Antwort eingef√ºgt';
            
            // Scroll to JSON section
            document.getElementById('jsonSection').scrollIntoView({ behavior: 'smooth' });
        }

        function validateJSON() {
            const jsonText = document.getElementById('jsonInput').value.trim();
            
            if (!jsonText) {
                alert('[ERROR] Bitte f√ºgen Sie JSON-Code ein!');
                return;
            }

            try {
                const json = JSON.parse(jsonText);
                
                // Grundvalidierung
                if (!json.metadata || !json.nodes || !json.edges) {
                    alert('[ERROR] Ung√ºltige JSON-Struktur: metadata, nodes oder edges fehlen');
                    return;
                }

                if (json.metadata.type !== 'process') {
                    alert('[ERROR] Falscher Typ: Erwartet "process"');
                    return;
                }

                if (!Array.isArray(json.nodes) || json.nodes.length === 0) {
                    alert('[ERROR] Keine g√ºltigen Nodes gefunden');
                    return;
                }

                if (!Array.isArray(json.edges)) {
                    alert('[ERROR] Keine g√ºltigen Edges gefunden');
                    return;
                }

                alert(`[OK] JSON ist g√ºltig!\n\nNodes: ${json.nodes.length}\nEdges: ${json.edges.length}\nTitel: ${json.metadata.title}`);
                
            } catch (error) {
                alert(`[ERROR] JSON-Parsing-Fehler: ${error.message}`);
            }
        }

        function processJSON() {
            const jsonText = document.getElementById('jsonInput').value.trim();
            
            if (!jsonText) {
                alert('[ERROR] Bitte f√ºgen Sie JSON-Code ein!');
                return;
            }

            try {
                currentJSON = JSON.parse(jsonText);
                
                // Validierung (vereinfacht)
                if (!currentJSON.metadata || !currentJSON.nodes || !currentJSON.edges) {
                    throw new Error('Ung√ºltige JSON-Struktur');
                }

                // Erfolg anzeigen
                document.getElementById('resultSection').style.display = 'block';
                document.getElementById('resultStatus').textContent = 
                    `[OK] System erfolgreich verarbeitet!\n` +
                    `[DATA] Titel: ${currentJSON.metadata.title}\n` +
                    `[TARGET] Nodes: ${currentJSON.nodes.length}\n` +
                    `[LINK] Edges: ${currentJSON.edges.length}\n` +
                    `üåç Zust√§ndigkeit: ${currentJSON.metadata.jurisdiction}`;
                
                document.getElementById('status').textContent = '[DATA] Status: System erfolgreich generiert!';
                
                // Scroll to result
                document.getElementById('resultSection').scrollIntoView({ behavior: 'smooth' });
                
            } catch (error) {
                alert(`[ERROR] Fehler beim Verarbeiten: ${error.message}`);
            }
        }

        function openInNodeges() {
            if (currentJSON) {
                // In einer echten Implementierung w√ºrde hier das JSON an Nodges √ºbergeben
                alert('[START] In einer echten Implementierung w√ºrde das System jetzt in Nodges 3D visualisiert!\n\nDas JSON w√ºrde an die loadNetworkFromImportedData() Funktion √ºbergeben.');
            }
        }

        function downloadJSON() {
            if (currentJSON) {
                const blob = new Blob([JSON.stringify(currentJSON, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `${currentJSON.metadata.title.replace(/[^a-zA-Z0-9]/g, '_')}.json`;
                a.click();
                URL.revokeObjectURL(url);
            }
        }

        function startOver() {
            document.getElementById('systemDescription').value = '';
            document.getElementById('promptSection').style.display = 'none';
            document.getElementById('jsonSection').style.display = 'none';
            document.getElementById('resultSection').style.display = 'none';
            document.getElementById('status').textContent = '[DATA] Status: Bereit f√ºr neue Eingabe';
            currentPrompt = '';
            currentJSON = null;
        }

        function showExamples() {
            const examples = {
                government: [
                    '[GOV] Baueingabe-Verfahren Kanton Z√ºrich f√ºr Neubauten in Wohnzonen',
                    '[GOV] Einb√ºrgerungsverfahren Schweiz f√ºr ordentliche Einb√ºrgerung',
                    '[GOV] Steuererkl√§rung-Prozess mit Pr√ºfung und Veranlagung',
                    '[GOV] F√ºhrerschein-Antrag mit Theorie- und Praxispr√ºfung'
                ],
                business: [
                    'üè¢ Software-Entwicklungsprozess mit Scrum-Methodik',
                    'üè¢ Recruiting-Prozess f√ºr Software-Entwickler',
                    'üè¢ Kundenservice-Workflow f√ºr Beschwerdebearbeitung',
                    'üè¢ Produktentwicklung von Idee bis Markteinf√ºhrung'
                ],
                healthcare: [
                    'üè• Notfall-Patientenaufnahme im Krankenhaus',
                    'üè• Operationsplanung und -durchf√ºhrung',
                    'üè• Medikamenten-Zulassungsverfahren',
                    'üè• Impfkampagne-Organisation und -durchf√ºhrung'
                ],
                education: [
                    'üéì Universit√§ts-Bewerbungsverfahren',
                    'üéì Pr√ºfungsorganisation und -durchf√ºhrung',
                    'üéì Forschungsprojekt von Antrag bis Publikation',
                    'üéì Online-Kurs-Entwicklung und -bereitstellung'
                ]
            };

            const systemType = document.getElementById('systemType').value;
            const exampleList = examples[systemType];
            
            alert(`[INFO] Beispiele f√ºr ${systemType}:\n\n${exampleList.join('\n\n')}`);
        }

        function loadExampleDescription(type, description) {
            document.getElementById('systemType').value = type;
            document.getElementById('systemDescription').value = description;
            document.getElementById('status').textContent = '[DATA] Status: Beispiel geladen - Bereit f√ºr Prompt-Generierung';
        }

        function loadExample(type) {
            if (type === 'us_political') {
                alert('üá∫üá∏ In einer echten Implementierung w√ºrde hier das US-Politiksystem geladen!\n\nDas vordefinierte JSON w√ºrde direkt in Nodges visualisiert.');
            } else if (type === 'baueingabe') {
                alert('[GOV] In einer echten Implementierung w√ºrde hier das Baueingabe-Beispiel geladen!\n\nDas vordefinierte JSON w√ºrde direkt in Nodges visualisiert.');
            }
        }
    </script>
</body>
</html>